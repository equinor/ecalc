import pytest
from libecalc.common.numbers import Numbers

data = [
    # negative integers
    (-0, 6, "0"),
    (-1, 6, "-1"),
    (-10, 6, "-10"),
    (-100, 6, "-100"),
    (-1000, 6, "-1000"),
    (-10000, 6, "-10000"),
    (-100000, 6, "-100000"),
    (-1000000, 6, "-1000000"),
    (-10000000, 6, "-10000000"),
    (-100000000, 6, "-100000000"),
    (-100000000, 6, "-100000000"),
    (-100000001, 6, "-100000001"),
    # negative decimals 0 < n > -1
    (-0.1, 6, "-0.1"),
    (-0.01, 6, "-0.01"),
    (-0.0001, 6, "-0.0001"),
    (-0.000001, 6, "-0.000001"),
    (-0.0000001, 6, "0"),
    (-0.00000001, 6, "0"),
    (-0.000000001, 6, "0"),
    (-0.0000000001, 6, "0"),
    # positive decimals 0 > n < 1
    (0.1, 6, "0.1"),
    (0.01, 6, "0.01"),
    (0.0001, 6, "0.0001"),
    (0.000001, 6, "0.000001"),
    (0.0000001, 6, "0"),
    (0.00000001, 6, "0"),
    (0.000000001, 6, "0"),
    (0.0000000001, 6, "0"),
    # positive integers
    (0, 6, "0"),
    (1, 6, "1"),
    (10, 6, "10"),
    (100, 6, "100"),
    (1000, 6, "1000"),
    (10000, 6, "10000"),
    (100000, 6, "100000"),
    (1000000, 6, "1000000"),
    (10000000, 6, "10000000"),
    (100000000, 6, "100000000"),
    (100000000, 6, "100000000"),
    (100000001, 6, "100000001"),
    # different edge cases, with rounding
    (0.0000009, 6, "0.000001"),
    (-0.0000009, 6, "-0.000001"),
    (0.09, 1, "0.1"),
    (-0.09, 1, "-0.1"),
    (1.09, 1, "1.1"),
    (-1.09, 1, "-1.1"),
    (1.09, 0, "1"),
    (-1.09, 0, "-1"),
    (0.09, 0, "0"),
    (-0.09, 0, "0"),
    # (1.09, -1, "1"), ValueError, Precision must be >= 0
    (1000.0, 6, "1000"),
    (1000.3333, 6, "1000.333"),
    (1000.3333, 3, "1000"),
    (1000.6666, 3, "1001"),
    (1000000.3333, 3, "1000000"),
    (1000000.6666, 3, "1000001"),
    (1000000.3333, 3, "1000000"),
    (1000000.6666, 3, "1000001"),
    (1000000.6666, 4, "1000001"),
    (1000000.66663333, 4, "1000001"),
    (-0.1000000000, 6, "-0.1"),
    (0.1000000000, 6, "0.1"),
]


@pytest.mark.parametrize(
    "number, precision, expected",
    data,
)
def test_numbers(number, precision, expected):
    assert Numbers.format_to_precision(number, precision) == expected
