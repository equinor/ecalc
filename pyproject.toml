[project]
name = "libecalc"
version = "10.0.22"
description = "eCalcâ„¢ is a software tool for calculation of energy demand and greenhouse gas (GHG) emissions from oil and gas production and processing."
authors = [{ name = "eCalc Team", email = "fg_ecalc@equinor.com" }]
requires-python = ">=3.11,<3.14"
readme = "README.md"
license = "LGPL-3.0-only"
keywords = [
    "energy",
    "emission",
    "scientific",
    "engineering",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Natural Language :: English",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
]
dependencies = [
    "pydantic<3",
    "PyYAML==6.*",
    "numpy<3",
    "pandas==2.*",
    "scipy<2",
    "ruamel-yaml~=0.18",
    "Shapely==2.*",
    "networkx~=3.2",
    "orjson~=3.8",
    "py4j~=0.10",
    "rich==14.*",
    "typer==0.*",
]

[project.optional-dependencies]
notebooks = [
    "jupyter==1.*",
    "matplotlib~=3.8",
]

[project.urls]
Homepage = "https://github.com/equinor/ecalc"
Repository = "https://github.com/equinor/ecalc"

[project.scripts]
ecalc = "ecalc_cli.main:main"

[dependency-groups]
dev = [
    "pre-commit==4.2.*",
    "pytest-snapshot~=0.9",
    "pytest<9.0.0,>=8.3.5",
    "coverage[toml]<8.0.0,>=7.2.5",
    "pdoc<15.0.0,>=14.5.1",
    "nbconvert~=7.4",
    "pytest-xdist<4.0.0,>=3.6.1",
    "inline-snapshot~=0.23",
    "mypy~=1.15",
    "types-PyYAML",
    "types-requests",
    "pandas-stubs",
    "types-networkx~=3.5.0.20250701",
    "types-shapely~=2.1.0.20250512",
    "scipy-stubs~=1.16.0.2",
]

[tool.uv]
required-version = "==0.7.*"
package = true

[tool.hatch.build.targets.sdist]
include = [
    "src/ecalc_cli",
    "src/ecalc_neqsim_wrapper",
    "src/libecalc",
]


[tool.hatch.build.targets.wheel]
include = [
    "src/ecalc_cli",
    "src/ecalc_neqsim_wrapper",
    "src/libecalc",
]

[tool.hatch.build.targets.wheel.sources]
"src/ecalc_cli" = "ecalc_cli"
"src/ecalc_neqsim_wrapper" = "ecalc_neqsim_wrapper"
"src/libecalc" = "libecalc"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."] # add this to avoid import errors during test collection
addopts = "--import-mode=importlib"
filterwarnings = [
    "error::DeprecationWarning", # Treat all DeprecationWarnings as errors and ignore explicitly below if needed
    "ignore:Avoid using the dto.*:DeprecationWarning", # Ignore internal deprecation warnings
    "always:Arrays of 2-dimensional*", # treat numpy 2.0 deprecation on 2-dimensional matrix as warning (not error)
]
markers = [
    "e2e: e2e tests.",
    "integtest: integration test",
    "slow: slow tests, often snapshot, but not necessarily. > 1 second.",
    "snapshot: snapshot tests, notoriously slow, but not necessarily.",
    "inlinesnapshot: inline snapshot tests, often used to test error messages",
    "dockersnapshot: tests that need x86 architecture for snapshot creation, so we make them in a container",
]

[tool.mypy]
mypy_path = "./src"
ignore_missing_imports = false
warn_return_any = false
# warn_unreachable = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
strict_concatenate = true
check_untyped_defs = true

no_implicit_reexport = true

warn_no_return = false
disable_error_code = ["call-overload", "union-attr", "valid-type", "return-value", "attr-defined", "assignment"]
namespace_packages = true
explicit_package_bases = true
plugins = ['pydantic.mypy']

[[tool.mypy.overrides]]
module = ["py4j.*"]
ignore_missing_imports = true

[tool.coverage.run]
omit = ["^./__init__.py", "^api/.*"]

[tool.ruff]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "UP", # Python upgrade, automatically upgrade syntax for newer versions of the language.
    "S", # flake8-bandit
]

# Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]

ignore = [
    "E501", # line too long, handled by formatter
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "B012", # TODO: Consider mitigation: `return` inside `finally` blocks cause exceptions to be silenced
    "B023", # FIXME: Potentially bugs in compressor code! Function definition does not bind loop variable. tracked by issue 3975
    "B905", # strict= parameter in zip() was added in python 3.10
    "UP006", # Avoid switching type annotations to 3.10
    "UP007", # Avoid switching type annotations to 3.10
    "S101", # Allow use of assert (especially for tests)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]

[tool.interrogate]
fail-under = 25 # Fail CI if the doc-string coverage falls below this level TODO: Set to 100%
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = false
quiet = false

[tool.codespell]
skip = '*.ts,*.lock,*package-lock.json'
ignore-words-list = "installationa, mke, ellipsis" # 'InstallationA' and 'Missing key error', ellipsis (...)
