"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2158],{11383:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>p,contentTitle:()=>R,default:()=>m,frontMatter:()=>_,metadata:()=>r,toc:()=>S});const r=JSON.parse('{"id":"about/modelling/examples/advanced","title":"Advanced model example","description":"This is a model very similar to Simple example. The main difference is the use of more advanced","source":"@site/docs/about/modelling/examples/advanced.mdx","sourceDirName":"about/modelling/examples","slug":"/about/modelling/examples/advanced","permalink":"/ecalc/docs/about/modelling/examples/advanced","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/ecalc/tree/main/documentation/docs/about/modelling/examples/advanced.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"about","previous":{"title":"Examples","permalink":"/ecalc/docs/about/modelling/examples/"},"next":{"title":"Drogon model example","permalink":"/ecalc/docs/about/modelling/examples/drogon"}}');var a=s(74848),i=s(28453),l=s(58908),t=s(83457);const d="RATE,       HEAD,   EFFICIENCY, SPEED\n# [m3/h],   [m],    [frac],     [rpm]\n3000,       8500,   0.72,       7500\n3500,       8000,   0.75,       7500\n4000,       7500,   0.74,       7500\n4500,       6500,   0.70,       7500\n4100,       16500,  0.72,       10500\n4600,       16000,  0.73,       10500\n5000,       15500,  0.74,       10500\n5500,       14500,  0.74,       10500\n6000,       13500,  0.72,       10500\n6500,       12000,  0.70,       10500",o="RATE,   FUEL\n0,      0\n0.01,   100\n10,     500\n20,     1200",c="POWER,  FUEL\n# [MW], [Sm3/d]\n0,       0\n0.1,     75000\n10,      80000\n20,      100000\n50,      500000\n100,     1000000\n",E="RATE,       HEAD,   EFFICIENCY, SPEED\n# [m3/h],   [m],    [%],        [rpm]\n250,        2350,   50,         10000\n300,        2300,   55,         10000\n350,        2250,   60,         10000\n400,        2200,   70,         10000\n450,        2150,   75,         10000\n500,        2100,   80,         10000\n550,        2050,   75,         10000\n600,        2000,   70,         10000",h="DATE,           OIL_PROD,  WATER_PROD,   GAS_PROD,  WATER_INJ,  GAS_LIFT\n01.01.2020,     1000,      20000,        4000000,   30000,      1200000\n01.01.2021,     1000,      20000,        4000000,   30000,      1200000\n01.01.2022,     1000,      20000,        4000000,   30000,      1200000\n01.01.2023,     2500,      21000,        4000000,   30000,      1200000\n01.01.2024,     3000,      22000,        4500000,   28000,      1300000\n01.01.2025,     3500,      23000,        5000000,   26000,      1350000\n01.01.2026,     4000,      24000,        5500000,   25000,      1400000\n01.01.2027,     4000,      25000,        6000000,   24000,      1400000\n01.01.2028,     4000,      20000,        6000000,   23000,      1400000\n01.01.2029,     5000,      20000,        5500000,   22000,      1350000\n01.01.2030,     9000,      20000,        5000000,   21000,      1300000\n01.01.2031,     5000,      20000,        3000000,   22000,      1300000\n01.01.2032,     4000,      22100,        3000000,   23000,      2000000\n01.01.2033,     1300,      22000,        2000000,   22000,      2000000\n01.01.2034,     1200,      25000,        1000000,   21000,      2000000\n01.01.2035,     1100,      25000,        1000000,   20000,      1500000\n01.01.2036,     1000,      22000,        500000,    18000,      1400000\n01.01.2037,     900,       20000,        500000,    17000,      1400000\n01.01.2038,     800,       18000,        500000,    17000,      1400000\n01.01.2039,     700,       18000,        200000,    17000,      1400000\n01.01.2040,     600,       10000,        200000,    15000,      1400000\n01.01.2041,     0,         0,            0,         0,          0",A="# mafro : 160524\n# Advanced v2: Regularity 0.87 / 0.95 + GEFAC rate conversion in variables\n# https://equinor.github.io/ecalc/docs/about/modelling/examples/advanced\n# Exercise for Equinor University course May 2024.\nSTART: 2020-01-01\nEND: 2041-01-01\nTIME_SERIES:\n  - NAME: SIM\n    TYPE: DEFAULT\n    FILE: base_profile.csv\n\nFACILITY_INPUTS:\n  - NAME: genset\n    FILE: genset.csv\n    TYPE: ELECTRICITY2FUEL\n  - NAME: gasexp\n    FILE: compressor_sampled.csv\n    TYPE: COMPRESSOR_TABULAR\n  - NAME: pump_chart\n    FILE: pump_chart.csv\n    TYPE: PUMP_CHART_SINGLE_SPEED\n    UNITS:\n      RATE: AM3_PER_HOUR\n      HEAD: M\n      EFFICIENCY: PERCENTAGE\n\nFUEL_TYPES:\n  - NAME: fuel_gas\n    CATEGORY: FUEL-GAS\n    EMISSIONS:\n      - NAME: CO2\n        FACTOR: 2.20 #kg/Sm3\n      - NAME: CH4\n        FACTOR: 0.01 #kg/Sm3\n  - NAME: bad_fuel_gas\n    CATEGORY: FUEL-GAS\n    EMISSIONS:\n      - NAME: CO2\n        FACTOR: 5.0 #kg/Sm3\n      - NAME: CH4\n        FACTOR: 0.01 #kg/Sm3\n\nMODELS:\n  - NAME: generic_from_design_point_compressor_chart\n    TYPE: COMPRESSOR_CHART\n    CHART_TYPE: GENERIC_FROM_DESIGN_POINT\n    POLYTROPIC_EFFICIENCY: 0.75\n    DESIGN_RATE: 10000\n    DESIGN_HEAD: 80\n    UNITS:\n      RATE: AM3_PER_HOUR\n      HEAD: KJ_PER_KG\n      EFFICIENCY: FRACTION\n  - NAME: predefined_variable_speed_compressor_chart\n    TYPE: COMPRESSOR_CHART\n    CHART_TYPE: VARIABLE_SPEED\n    UNITS:\n      RATE: AM3_PER_HOUR\n      HEAD: M # M or KJ_PER_KG\n      EFFICIENCY: FRACTION\n    CURVES:\n      FILE: compressor_chart.csv\n  - NAME: medium_fluid\n    TYPE: FLUID\n    FLUID_MODEL_TYPE: PREDEFINED\n    EOS_MODEL: SRK\n    GAS_TYPE: MEDIUM\n  - NAME: turbine\n    TYPE: TURBINE\n    LOWER_HEATING_VALUE: 38 # MJ/Sm3\n    TURBINE_LOADS: [0, 2.352, 4.589, 6.853, 9.125, 11.399, 13.673, 15.947, 18.223, 20.496, 22.767] # MW\n    TURBINE_EFFICIENCIES: [0, 0.138, 0.210, 0.255, 0.286, 0.310, 0.328, 0.342, 0.353, 0.360, 0.362]\n  - NAME: simplified_compressor_train_model\n    TYPE: SIMPLIFIED_VARIABLE_SPEED_COMPRESSOR_TRAIN\n    FLUID_MODEL: medium_fluid\n    COMPRESSOR_TRAIN:\n      STAGES:\n        - INLET_TEMPERATURE: 30\n          COMPRESSOR_CHART: generic_from_design_point_compressor_chart\n        - INLET_TEMPERATURE: 30\n          COMPRESSOR_CHART: generic_from_design_point_compressor_chart\n        - INLET_TEMPERATURE: 30\n          COMPRESSOR_CHART: generic_from_design_point_compressor_chart\n\n  - NAME: trainB\n    TYPE: VARIABLE_SPEED_COMPRESSOR_TRAIN\n    FLUID_MODEL: medium_fluid\n    COMPRESSOR_TRAIN:\n      STAGES:\n        - INLET_TEMPERATURE: 30\n          COMPRESSOR_CHART: predefined_variable_speed_compressor_chart\n          CONTROL_MARGIN: 0\n          CONTROL_MARGIN_UNIT: PERCENTAGE\n        - INLET_TEMPERATURE: 30\n          COMPRESSOR_CHART: predefined_variable_speed_compressor_chart\n          CONTROL_MARGIN: 0\n          CONTROL_MARGIN_UNIT: PERCENTAGE\n  - NAME: trainBturbine\n    TYPE: COMPRESSOR_WITH_TURBINE\n    COMPRESSOR_MODEL: trainB\n    TURBINE_MODEL: turbine\n\nVARIABLES:\n  hydrocarbon_export_sm3_per_day:\n    VALUE: SIM;OIL_PROD {+} SIM;GAS_PROD {/} 1000\n  gas_export_rate_sm3_per_day:\n    VALUE: SIM;GAS_PROD\n  water_injection_rate:\n    VALUE: SIM;WATER_INJ\n  gas_export_condition:\n    VALUE: SIM;GAS_PROD > 0\n  base_production_load_mw:\n    VALUE: 7.6 {+} 4.1 {*} (SIM;GAS_LIFT > 0)\n  water_injection_condition:\n    VALUE: SIM;WATER_PROD >0\n  flare_a_fuel_rate_sm3_day:\n    2020-06-01:\n      VALUE: 5000\n    2030-01-01:\n      VALUE: 2000\n  flare_b_fuel_rate_sm3_day:\n    2020-06-01:\n      VALUE: 10000\n    2030-01-01:\n      VALUE: 7000\n\n  pea:\n    VALUE: 0.95 # 0.87\n  peb:\n    VALUE: 0.95\n  gasratea_cd:\n    VALUE: $var.gas_export_rate_sm3_per_day  {*} $var.pea\n  gasrateb_cd:\n    VALUE: $var.gas_export_rate_sm3_per_day  {*} $var.peb\n  winjratea_cd:\n    VALUE: $var.water_injection_rate  {*} $var.pea\n  hcexpa_cd:\n    VALUE: $var.hydrocarbon_export_sm3_per_day {*} $var.pea\n  hcexpb_cd:\n    VALUE: $var.hydrocarbon_export_sm3_per_day {*} $var.peb\n\nINSTALLATIONS:\n  - NAME: Installation A\n    HCEXPORT: $var.hcexpa_cd\n    FUEL: fuel_gas\n    CATEGORY: FIXED\n    REGULARITY: $var.pea    \n    GENERATORSETS:\n      - NAME: Generator set A\n        CATEGORY: TURBINE-GENERATOR\n        ELECTRICITY2FUEL: genset\n        CONSUMERS:\n          - NAME: Fixed production loads A\n            CATEGORY: FIXED-PRODUCTION-LOAD\n            ENERGY_USAGE_MODEL:\n              TYPE: DIRECT\n              LOAD: $var.base_production_load_mw\n              CONSUMPTION_RATE_TYPE: STREAM_DAY # (This is default)\n          - NAME: Gas export compressors system A\n            CATEGORY: COMPRESSOR\n            ENERGY_USAGE_MODEL:\n              TYPE: COMPRESSOR_SYSTEM\n              COMPRESSORS:\n                - NAME: train1_A\n                  COMPRESSOR_MODEL: simplified_compressor_train_model\n                - NAME: train2_A\n                  COMPRESSOR_MODEL: simplified_compressor_train_model\n              TOTAL_SYSTEM_RATE: $var.gasratea_cd\n              OPERATIONAL_SETTINGS:\n              - RATE_FRACTIONS: [1.0, 0.0]\n                SUCTION_PRESSURE: 20\n                DISCHARGE_PRESSURE: 120\n              - RATE_FRACTIONS: [0.5, 0.5]\n                SUCTION_PRESSURE: 20\n                DISCHARGE_PRESSURE: 120\n          - NAME: Water injection pump system A\n            CATEGORY: PUMP\n            ENERGY_USAGE_MODEL:\n              TYPE: PUMP_SYSTEM\n              PUMPS:\n                - NAME: pump1\n                  CHART: pump_chart\n                - NAME: pump2\n                  CHART: pump_chart\n                - NAME: pump3\n                  CHART: pump_chart\n                - NAME: pump4\n                  CHART: pump_chart\n              FLUID_DENSITY: 1026\n              TOTAL_SYSTEM_RATE: $var.winjratea_cd\n              CONDITION: $var.water_injection_condition\n              OPERATIONAL_SETTINGS:\n                - RATE_FRACTIONS: [1, 0, 0, 0]\n                  SUCTION_PRESSURES: [3, 3, 3, 3]\n                  DISCHARGE_PRESSURES: [200, 200, 200, 200]\n                  CROSSOVER: [2, 0, 0, 0]\n                - RATE_FRACTIONS: [0.5, 0.5, 0, 0]\n                  SUCTION_PRESSURE: 3\n                  DISCHARGE_PRESSURE: 200\n                - RATE_FRACTIONS: [0.33, 0.33, 0.34, 0]\n                  SUCTION_PRESSURE: 3\n                  DISCHARGE_PRESSURE: 200\n                - RATE_FRACTIONS:  [0.25, 0.25, 0.25, 0.25]\n                  SUCTION_PRESSURE: 3\n                  DISCHARGE_PRESSURE: 200\n          - NAME: Single pump A\n            CATEGORY: PUMP\n            ENERGY_USAGE_MODEL:\n              TYPE: PUMP\n              CONDITION: $var.water_injection_condition\n              ENERGYFUNCTION: pump_chart\n              RATE: 5000 {*} $var.pea\n              SUCTION_PRESSURE: 3\n              DISCHARGE_PRESSURE: 200\n              FLUID_DENSITY: 1026\n    FUELCONSUMERS:\n      - NAME: Flare A\n        CATEGORY: FLARE\n        ENERGY_USAGE_MODEL:\n          TYPE: DIRECT\n          FUELRATE: $var.flare_a_fuel_rate_sm3_day\n          CONSUMPTION_RATE_TYPE: STREAM_DAY # (This is default)\n\n  - NAME: Installation B\n    HCEXPORT: $var.hcexpb_cd\n    FUEL: bad_fuel_gas\n    CATEGORY: FIXED\n    REGULARITY: $var.peb    \n    GENERATORSETS:\n      - NAME: Generator set B\n        CATEGORY: TURBINE-GENERATOR\n        ELECTRICITY2FUEL: genset\n        CONSUMERS:\n          - NAME: Fixed production loads B\n            CATEGORY: FIXED-PRODUCTION-LOAD\n            ENERGY_USAGE_MODEL:\n              TYPE: DIRECT\n              LOAD: 7.6\n              CONSUMPTION_RATE_TYPE: STREAM_DAY # (This is default)\n    FUELCONSUMERS:\n      - NAME: Flare B\n        CATEGORY: FLARE\n        ENERGY_USAGE_MODEL:\n          TYPE: DIRECT\n          FUELRATE: $var.flare_b_fuel_rate_sm3_day\n          CONSUMPTION_RATE_TYPE: STREAM_DAY # (This is default)\n\n      - NAME: Gas export compressors B\n        CATEGORY: GAS-DRIVEN-COMPRESSOR\n        FUEL: fuel_gas\n        ENERGY_USAGE_MODEL:\n          TYPE: COMPRESSOR_SYSTEM\n          COMPRESSORS:\n            - NAME: train1_B\n              COMPRESSOR_MODEL: trainBturbine\n            - NAME: train2_B\n              COMPRESSOR_MODEL: trainBturbine\n            - NAME: train3_B\n              COMPRESSOR_MODEL: trainBturbine              \n            - NAME: train4_B\n              COMPRESSOR_MODEL: trainBturbine              \n          TOTAL_SYSTEM_RATE: $var.gasrateb_cd\n          OPERATIONAL_SETTINGS:\n            - RATE_FRACTIONS: [1, 0, 0, 0]\n              SUCTION_PRESSURE: 20\n              DISCHARGE_PRESSURE: 200\n            - RATE_FRACTIONS: [0.5, 0.5, 0, 0]\n              SUCTION_PRESSURE: 20\n              DISCHARGE_PRESSURE: 200     \n            - RATE_FRACTIONS: [0.34, 0.33, 0.33, 0]\n              SUCTION_PRESSURE: 20\n              DISCHARGE_PRESSURE: 200\n            - RATE_FRACTIONS: [0.25, 0.25, 0.25, 0.25]\n              SUCTION_PRESSURE: 20\n              DISCHARGE_PRESSURE: 200              ",_={},R="Advanced model example",p={},S=[{value:"YAML model overview",id:"yaml-model-overview",level:2},{value:"TIME_SERIES",id:"time_series",level:2},{value:"FACILITY_INPUTS",id:"facility_inputs",level:2},{value:"FUEL_TYPES",id:"fuel_types",level:2},{value:"MODELS",id:"models",level:2},{value:"VARIABLES",id:"variables",level:2},{value:"INSTALLATIONS",id:"installations",level:2},{value:"Installation A",id:"installation-a",level:3},{value:"Installation B",id:"installation-b",level:3},{value:"ENERGY_USAGE_MODEL",id:"energy_usage_model",level:2},{value:"Full eCalc YAML model",id:"full-ecalc-yaml-model",level:2},{value:"Input files",id:"input-files",level:3}];function T(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"advanced-model-example",children:"Advanced model example"})}),"\n",(0,a.jsxs)(n.p,{children:["This is a model very similar to ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/modelling/examples/simple",children:"Simple example"}),". The main difference is the use of more advanced\nenergy usage models and consumer systems, and the addition of a second installation."]}),"\n",(0,a.jsxs)(n.p,{children:["Both installations exports oil (",(0,a.jsx)(n.code,{children:"OIL_PROD"}),") and gas (",(0,a.jsx)(n.code,{children:"GAS_PROD"}),").\nThe installations emit CO",(0,a.jsx)("sub",{children:"2"})," and CH",(0,a.jsx)("sub",{children:"4"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The following is an example with one installation called ",(0,a.jsx)(n.code,{children:"Installation A"})," and ",(0,a.jsx)(n.code,{children:"Installation B"}),"."]}),"\n",(0,a.jsx)(n.mermaid,{value:"graph TD;\n   Asset(Asset) --\x3e A(Installation A);\n   A(Installation A) --\x3e AA(Flare A);\n   A --\x3e AD(Generator set A);\n   AD --\x3e AE(Base production load A);\n   AD --\x3e AF(Gas export compressor A);\n   AD --\x3e AG(Produced water reinjection pump A);\n   AD --\x3e AH(Sea water injection pump A);\n   \n   Asset --\x3e B(Installation B);\n   B --\x3e BA(Generator set B);\n   B --\x3e BD(Gas export compressor B);\n   BA --\x3e BC(Base production load B);\n   B --\x3e BB(Flare B);\n   style A stroke:red;\n   style B stroke:red;\n   style BC stroke:blue;\n   style AE stroke:blue;\n   style AF stroke:blue;\n   style AG stroke:blue;\n   style AH stroke:blue;"}),"\n",(0,a.jsx)(n.p,{children:"The results of a performed characterization of the equipment are listed below:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Consumer"}),(0,a.jsx)(n.th,{children:"Type"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Generator set A"}),(0,a.jsx)(n.td,{children:"Generator set"}),(0,a.jsx)(n.td,{children:"Variable fuel consumer with electricity to fuel function"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Base production load A"}),(0,a.jsx)(n.td,{children:"Power consumer"}),(0,a.jsx)(n.td,{children:"Production base load varying depending on a binary condition"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Gas export compressor A"}),(0,a.jsx)(n.td,{children:"Power consumer"}),(0,a.jsx)(n.td,{children:"Variable consumption depending on gas sales rate"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Produced water reinjection pump A"}),(0,a.jsx)(n.td,{children:"Power consumer"}),(0,a.jsx)(n.td,{children:"Variable consumption depending on water production rate and water injection rate. The pump suction pressure is 10 bar and discharge pressure is 200 bar."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Sea water injection pump A"}),(0,a.jsx)(n.td,{children:"Power consumer"}),(0,a.jsx)(n.td,{children:"Variable consumption depending on a complex combination on water injection rate and water production rate"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Flare A"}),(0,a.jsx)(n.td,{children:"Direct fuel consumer"}),(0,a.jsx)(n.td,{children:"Flare A"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Generator set B"}),(0,a.jsx)(n.td,{children:"Generator set"}),(0,a.jsx)(n.td,{children:"Variable fuel consumption with electricity to fuel function"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Base production load B"}),(0,a.jsx)(n.td,{children:"Power consumer"}),(0,a.jsx)(n.td,{children:"Production base load at 7.6 MW"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Gas export compressor B"}),(0,a.jsx)(n.td,{children:"Direct fuel consumer"}),(0,a.jsx)(n.td,{children:"Variable fuel consumption depending on gas sales rate"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Flare B"}),(0,a.jsx)(n.td,{children:"Direct fuel consumer"}),(0,a.jsx)(n.td,{children:"Flare B"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"yaml-model-overview",children:"YAML model overview"}),"\n",(0,a.jsx)(n.p,{children:"The YAML model consist of these main components:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Time series inputs - ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/TIME_SERIES",children:"TIME_SERIES"})]}),"\n",(0,a.jsxs)(n.li,{children:["Facility characterization input - ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/FACILITY_INPUTS",children:"FACILITY_INPUTS"})]}),"\n",(0,a.jsxs)(n.li,{children:["Fuel input - ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/FUEL_TYPES",children:"FUEL_TYPES"})]}),"\n",(0,a.jsxs)(n.li,{children:["Model specifications - ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/MODELS",children:"MODELS"})]}),"\n",(0,a.jsxs)(n.li,{children:["Model variables - ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/VARIABLES",children:"VARIABLES"})]}),"\n",(0,a.jsxs)(n.li,{children:["Installation topology - ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/INSTALLATIONS",children:"INSTALLATIONS"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The YAML setup file looks like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="model.yaml"',children:"TIME_SERIES:\n  <placeholder>\nFACILITY_INPUTS:\n  <placeholder>\nFUEL_TYPES:\n  <placeholder>\nVARIABLES:\n  <placeholder>\nINSTALLATIONS:\n  <placeholder>\n"})}),"\n",(0,a.jsx)(n.p,{children:"We will now replace the placeholders for each of the main keywords above."}),"\n",(0,a.jsx)(n.h2,{id:"time_series",children:"TIME_SERIES"}),"\n",(0,a.jsxs)(n.p,{children:["The reservoir variables, in this case, are found in a CSV (Comma separated file) ",(0,a.jsx)(n.code,{children:"production_data.csv"}),".\nWe give the time-series data a name that can be referenced as variables elsewhere in the form ",(0,a.jsx)(n.code,{children:"<NAME>:<NAME OF COLUMN>"}),".\nSee ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/TIME_SERIES",children:"TIME_SERIES"})," for further details."]}),"\n",(0,a.jsx)(l.A,{title:"model.yaml",start:5,end:8,language:"yaml",children:A}),"\n",(0,a.jsx)(n.h2,{id:"facility_inputs",children:"FACILITY_INPUTS"}),"\n",(0,a.jsxs)(n.p,{children:["We specify CSV input data for processing equipment using FACILITY_INPUTS. This is used for generatorsets,\ntabulated/sampled models and pump charts. See ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/FACILITY_INPUTS",children:"FACILITY_INPUTS"})," for further details."]}),"\n",(0,a.jsxs)(n.p,{children:["Here we define a tabulated genset, a sampled compressor, and a single speed pump chart.\nNote that more complicated energy models are defined under the ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/MODELS",children:"MODELS"}),"-keyword."]}),"\n",(0,a.jsx)(l.A,{title:"model.yaml",start:10,end:23,language:"yaml",children:A}),"\n",(0,a.jsx)(n.h2,{id:"fuel_types",children:"FUEL_TYPES"}),"\n",(0,a.jsxs)(n.p,{children:["In this example there are two ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/FUEL_TYPES",children:"FUEL_TYPES"})," - ",(0,a.jsx)(n.code,{children:"fuel_gas"})," and ",(0,a.jsx)(n.code,{children:"bad_fuel_gas"}),".\nThese are used for Installation A and Installation B respectively.\nHere we also define emissions in CO",(0,a.jsx)("sub",{children:"2"})," and CH",(0,a.jsx)("sub",{children:"4"}),":"]}),"\n",(0,a.jsx)(l.A,{title:"model.yaml",start:25,end:39,language:"yaml",children:A}),"\n",(0,a.jsx)(n.h2,{id:"models",children:"MODELS"}),"\n",(0,a.jsxs)(n.p,{children:["This advanced example requires some energy usage models to be defined under the model section. See ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/MODELS",children:"MODELS"})," for details."]}),"\n",(0,a.jsx)(n.p,{children:"Here we specify:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Compressor chart based on design points"}),"\n",(0,a.jsx)(n.li,{children:"Compressor chart based on chart data"}),"\n",(0,a.jsx)(n.li,{children:"Medium density fluid"}),"\n",(0,a.jsx)(n.li,{children:"Gas turbine"}),"\n",(0,a.jsx)(n.li,{children:"Simplified compressor train model"}),"\n"]}),"\n",(0,a.jsx)(l.A,{title:"model.yaml",start:41,end:99,language:"yaml",children:A}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/MODELS",children:"MODELS"})," for further details."]}),"\n",(0,a.jsx)(n.h2,{id:"variables",children:"VARIABLES"}),"\n",(0,a.jsxs)(n.p,{children:["To run the model it is recommended to specify ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/VARIABLES",children:"VARIABLES"}),",\ninstead of hard coding values in difference places. This makes it easier to develop, maintain and understand the model\nby allowing descriptive variable names and avoid duplications."]}),"\n",(0,a.jsx)(n.p,{children:"For our model, we specify the following variables:"}),"\n",(0,a.jsx)(l.A,{title:"model.yaml",start:101,end:138,language:"yaml",children:A}),"\n",(0,a.jsxs)(n.p,{children:["We reference the ",(0,a.jsx)(n.a,{href:"#time_series",children:"TIME_SERIES"})," ",(0,a.jsx)(n.code,{children:"SIM"})," using the column names from the CSV file."]}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsx)(n.p,{children:"You can use boolean condition such as shown in base_production_load_mw and time varying variables such as shown in\nflare_a_fuel_rate_sm3_day and flare_b_fuel_rate_sm3_day to write simpler models with less duplicated code."}),(0,a.jsx)(n.p,{children:"The base_production_load_mw adds another 4.1 MW when the gas lift injection rate is positive."}),(0,a.jsx)(n.p,{children:"The flare rate changes in year 2030."})]}),"\n",(0,a.jsx)(n.h2,{id:"installations",children:"INSTALLATIONS"}),"\n",(0,a.jsx)(n.p,{children:"An installation is composed of hydrocarbon export, a default fuel for that installation and consumers in the form\nof generatorsets (with electric sub-consumers), and direct fuel consumers."}),"\n",(0,a.jsx)(n.p,{children:"We specify:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"NAME"}),": the installation name"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"HCEXPORT"}),": Hydrocarbon export in Sm",(0,a.jsx)("sup",{children:"3"}),"/day by referring to the variable $var.hydrocarbon_export_sm3_per_day specified under ",(0,a.jsx)(n.a,{href:"#variables",children:"VARIABLES"})," above."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"FUEl"}),": Default fuel specified in ",(0,a.jsx)(n.a,{href:"#fuel_types",children:"FUEL_TYPES"})," above. Note the different fuels used by the two installations."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CATEGORY"}),": FIXED (installation) category is used to group result data for reporting. See ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/CATEGORY",children:"CATEGORY"})," for details."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"REGULARITY"}),": Defined by the variable $var.pea specified under ",(0,a.jsx)(n.a,{href:"#variables",children:"VARIABLES"})," above. ",(0,a.jsx)(n.code,{children:"REGULARITY"})," is closely related to the production efficiency (PE) of a facility, and is used to convert between stream day (sd)- and calendar day (cd) rates."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"INSTALLATIONS:\n  - NAME: Installation A\n    HCEXPORT: $var.hcexpa_cd\n    FUEL: fuel_gas\n    CATEGORY: FIXED\n    REGULARITY: $var.pea\n    GENERATORSETS:\n      <placeholder>\n    FUELCONSUMERS:\n      <placeholder>\n  - NAME: Installation B\n    HCEXPORT: $var.hcexpb_cd\n    FUEL: bad_fuel_gas\n    CATEGORY: FIXED\n    REGULARITY: $var.peb\n    GENERATORSETS:\n      <placeholder>\n    FUELCONSUMERS:\n      <placeholder>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"installation-a",children:"Installation A"}),"\n",(0,a.jsxs)(n.p,{children:["There is one generator set, ",(0,a.jsx)(n.code,{children:"Generator set A"}),". This has a power to fuel function defined in\n",(0,a.jsx)(n.a,{href:"#facility_inputs",children:"FACILITY_INPUTS"})," with the name ",(0,a.jsx)(n.code,{children:"genset"}),". Further, the consumers getting\npower from the generator set are ",(0,a.jsx)(n.em,{children:"Base production load"}),", ",(0,a.jsx)(n.em,{children:"Gas export compressor"}),", ",(0,a.jsx)(n.em,{children:"Produced water reinjection pump"}),"\nand ",(0,a.jsx)(n.em,{children:"Water injection pump"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The direct fuel consumers are ",(0,a.jsx)(n.strong,{children:"Flare"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The setup for ",(0,a.jsx)(n.code,{children:"Installation A"})," thus becomes:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"  - NAME: Installation A\n    HCEXPORT: $var.hcexpa_cd\n    FUEL: fuel_gas\n    CATEGORY: FIXED\n    REGULARITY: $var.pea    \n    GENERATORSETS:\n      - NAME: Generator set A\n        CATEGORY: TURBINE-GENERATOR\n        ELECTRICITY2FUEL: genset\n        CONSUMERS:\n          - NAME: Fixed production loads A\n            CATEGORY: FIXED-PRODUCTION-LOAD\n            ENERGY_USAGE_MODEL:\n              <placeholder>\n          - NAME: Gas export compressors system A\n            CATEGORY: COMPRESSOR\n            ENERGY_USAGE_MODEL:\n              <placeholder>\n          - NAME: Water injection pump system A\n            CATEGORY: PUMP\n            ENERGY_USAGE_MODEL:\n              <placeholder>\n          - NAME: Single pump A\n            CATEGORY: PUMP\n            ENERGY_USAGE_MODEL:\n              <placeholder>\n    FUELCONSUMERS:\n      - NAME: Flare A\n        CATEGORY: FLARE\n        ENERGY_USAGE_MODEL:\n          <placeholder>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"installation-b",children:"Installation B"}),"\n",(0,a.jsxs)(n.p,{children:["There is one generator set, ",(0,a.jsx)(n.code,{children:"Generator set B"}),". This has a power to fuel function defined in\n",(0,a.jsx)(n.a,{href:"#facility_inputs",children:"FACILITY_INPUTS"})," with the name ",(0,a.jsx)(n.code,{children:"genset"}),". Further, the consumer getting\npower from the generator set is ",(0,a.jsx)(n.em,{children:"Base production load"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The direct fuel consumers are ",(0,a.jsx)(n.strong,{children:"Flare"})," and ",(0,a.jsx)(n.strong,{children:"Gas export compressor"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The setup for ",(0,a.jsx)(n.code,{children:"Installation B"})," thus becomes:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"  - NAME: Installation B\n    HCEXPORT: $var.hcexpb_cd\n    FUEL: bad_fuel_gas\n    CATEGORY: FIXED\n    REGULARITY: $var.peb    \n    GENERATORSETS:\n      - NAME: Generator set B\n        CATEGORY: TURBINE-GENERATOR\n        ELECTRICITY2FUEL: genset\n        CONSUMERS:\n          - NAME: Fixed production loads B\n            CATEGORY: FIXED-PRODUCTION-LOAD\n            ENERGY_USAGE_MODEL:\n              <placeholder>\n    FUELCONSUMERS:\n      - NAME: Flare B\n        CATEGORY: FLARE\n        ENERGY_USAGE_MODEL:\n          <placeholder>\n\n      - NAME: Gas export compressors B\n        CATEGORY: GAS-DRIVEN-COMPRESSOR\n        FUEL: fuel_gas\n        ENERGY_USAGE_MODEL:\n          <placeholder>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"energy_usage_model",children:"ENERGY_USAGE_MODEL"}),"\n",(0,a.jsxs)(n.p,{children:["We will now fill in the final placeholders with detailed ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/references/ENERGY_USAGE_MODEL",children:"ENERGY_USAGE_MODEL"}),"s."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Fixed production loads A"})," has a load of 7.6 MW with additional 4.1 MW when the field gas injection rate is positive:"]}),"\n",(0,a.jsx)(l.A,{title:"model.yaml",start:151,end:156,language:"yaml",children:A}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Gas export compressor system A"})," is represented by a consumer system of two simplified compressor train models.\nThe system has defined the variable ",(0,a.jsx)(n.a,{href:"#variables",children:"gasratea_cd"})," and will run two different\nrate distributions between these two compressor trains. It will first send all rate to the first compressor train\nand nothing to the second ",(0,a.jsx)(n.code,{children:"RATE_FRACTIONS: [1.0, 0.0]"})," and then it will run the same input while distributing equal\nrates to the two compressor trains ",(0,a.jsx)(n.code,{children:"RATE_FRACTIONS: [0.5, 0.5]"}),". The final result will be composed of the first\nsetting that returns a valid result for the compressors.\nSee ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/modelling/setup/installations/compressor_models_in_calculations/compressor_system",children:"COMPRESSOR_SYSTEM"})," for further details."]}),"\n",(0,a.jsx)(n.p,{children:"The compressor model is then defined:"}),"\n",(0,a.jsx)(l.A,{start:157,end:173,language:"yaml",children:A}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Water injection pump system A"})," is variable and its energy function is dependent on the field's water\ninjection rate (",(0,a.jsx)(n.code,{children:"WATER_INJ"}),") that is set in the variable ",(0,a.jsx)(n.a,{href:"#variables",children:"water_injection_rate"})," as ",(0,a.jsx)(n.code,{children:"SIM;WATER_INJ"}),".\nThe pump only runs when the variables ",(0,a.jsx)(n.a,{href:"#variables",children:"water_injection_condition"})," evaluates to true as ",(0,a.jsx)(n.code,{children:"SIM;WATER_PROD > 0"}),".\nThis is when the water injection rate is positive. Fluid density, suction pressure and discharge pressure\nis also defined."]}),"\n",(0,a.jsxs)(n.p,{children:["This PUMP_SYSTEM behaves much the same as the COMPRESSOR_SYSTEM above.\nSee ",(0,a.jsx)(n.a,{href:"/ecalc/docs/about/modelling/setup/installations/pump_models_in_calculations#pump_system-energy-usage-model",children:"PUMP_SYSTEM"})," for further details."]}),"\n",(0,a.jsx)(l.A,{start:174,end:203,language:"yaml",children:A}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Single pump A"})," has an energy function that is dependent on the seawater injection rate, same as the system above.\nIt uses the pump_chart defined in ",(0,a.jsx)(n.a,{href:"#facility_inputs",children:"FACILITY_INPUTS"})," above."]}),"\n",(0,a.jsx)(n.p,{children:"The pump model is then defined:"}),"\n",(0,a.jsx)(l.A,{start:204,end:213,language:"yaml",children:A}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Flare A"})," is changing on the 1st of July 2020 and 1st of January 2030. Therefore, we need to use a different constant\nfuel consumption value before and after this date. This is done using the variable ",(0,a.jsx)(n.a,{href:"#variables",children:"flare_a_fuel_rate_sm3_day"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The model becomes:"}),"\n",(0,a.jsx)(l.A,{start:215,end:220,language:"yaml",children:A}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Base production loads B"})," has a load of 7.6 :"]}),"\n",(0,a.jsx)(l.A,{start:232,end:237,language:"yaml",children:A}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Flare B"})," is changing on the 1st of July 2020 and 1st of January 2030. Therefore, we need to use a different constant\nfuel consumption value before and after this date. This is done using the variable ",(0,a.jsx)(n.a,{href:"#variables",children:"flare_a_fuel_rate_sm3_day"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The model becomes:"}),"\n",(0,a.jsx)(l.A,{start:239,end:244,language:"yaml",children:A}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Gas export compressors B"}),"  is a variable fuel consumer whose energy function depends on the field gas production rate (",(0,a.jsx)(n.code,{children:"GAS_PROD"}),") defined\nin the variable ",(0,a.jsx)(n.a,{href:"#variables",children:"gasrateb_cd"})," as ",(0,a.jsx)(n.code,{children:"SIM;GAS_PROD"}),", and put to the condition ",(0,a.jsx)(n.a,{href:"#variables",children:"gas_export_condition"})," as ",(0,a.jsx)(n.code,{children:"SIM;GAS_PROD > 0"})]}),"\n",(0,a.jsx)(n.p,{children:"The model is specified:"}),"\n",(0,a.jsx)(l.A,{start:246,end:273,language:"yaml",children:A}),"\n",(0,a.jsx)(n.h2,{id:"full-ecalc-yaml-model",children:"Full eCalc YAML model"}),"\n",(0,a.jsx)(t.A,{title:"model.yaml",language:"yaml",children:A}),"\n",(0,a.jsx)(n.h3,{id:"input-files",children:"Input files"}),"\n",(0,a.jsx)(t.A,{title:"compressor_chart.csv",children:d}),"\n",(0,a.jsx)(t.A,{title:"compressor_sampled.csv",children:o}),"\n",(0,a.jsx)(t.A,{title:"genset.csv",children:c}),"\n",(0,a.jsx)(t.A,{title:"pump_chart.csv",children:E}),"\n",(0,a.jsx)(t.A,{title:"base_profile.csv",children:h})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(T,{...e})}):T(e)}},58908:(e,n,s)=>{s.d(n,{A:()=>i});var r=s(83457),a=s(74848);const i=function({start:e,end:n,children:s,...i}){const l=s.split("\n").slice(e-1,n).join("\n");return(0,a.jsx)(r.A,{...i,children:l})}}}]);