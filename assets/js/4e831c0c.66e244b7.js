"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3370],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var a=t(96540);const i={},s=a.createContext(i);function l(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(s.Provider,{value:n},e.children)}},84264:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"changelog/v11-1","title":"v11.1","description":"Features","source":"@site/docs/changelog/v11-1.md","sourceDirName":"changelog","slug":"/changelog/v11.1-release","permalink":"/ecalc/docs/changelog/v11.1-release","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/ecalc/tree/main/documentation/docs/changelog/v11-1.md","tags":[{"inline":true,"label":"release","permalink":"/ecalc/docs/tags/release"},{"inline":true,"label":"eCalc","permalink":"/ecalc/docs/tags/e-calc"}],"version":"current","sidebarPosition":-53,"frontMatter":{"slug":"v11.1-release","title":"v11.1","authors":"ecalc-team","tags":["release","eCalc"],"sidebar_position":-53},"sidebar":"changelog","previous":{"title":"v12.0","permalink":"/ecalc/docs/changelog/v12.0-release"},"next":{"title":"v11.0","permalink":"/ecalc/docs/changelog/v11.0-release"}}');var i=t(74848),s=t(28453);const l={slug:"v11.1-release",title:"v11.1",authors:"ecalc-team",tags:["release","eCalc"],sidebar_position:-53},r="eCalc v11.1",o={},d=[{value:"Features",id:"features",level:2},{value:"Bug Fixes",id:"bug-fixes",level:2},{value:"Breaking changes",id:"breaking-changes",level:2},{value:"CLI",id:"cli",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"ecalc-v111",children:"eCalc v11.1"})}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Results at consumer level (",(0,i.jsx)(n.code,{children:"FUEL_CONSUMERS"})," and ",(0,i.jsx)(n.code,{children:"CONSUMERS"})," under ",(0,i.jsx)(n.code,{children:"GENERATOR_SET"}),") will no longer overwrite results\nwith the\nresult from the previous timestep when results are invalid (ie. results from valid steps would extrapolate over\ninvalid results).\nInstead, the actual result will be returned. This means that you can now safely trust the results, even when they are\ninvalid, to\nbetter understand what is needed in order to make them valid. You may experience that the ",(0,i.jsx)(n.code,{children:"GENERATOR_SET"})," will contain\ninvalid points where it previously did not. This will be because the (invalid) power demand from a consumer with an\ninvalid point is now reported/aggregated to the ",(0,i.jsx)(n.code,{children:"GENERATOR_SET"}),". This invalid power demand may exceed the power demand\nextrapolated from the last time step, which was reported earlier. If the total power demand for a ",(0,i.jsx)(n.code,{children:"GENERATOR_SET"})," goes\nabove the maximum power it will fail to provide sufficient power, and therefore be reported as invalid. There should\nbe no changes in valid/invalid time steps at asset level. ",(0,i.jsx)(n.strong,{children:"NOTE"}),": It is highly recommended to use ",(0,i.jsx)(n.em,{children:"Data Defined\nOutput"})," frequency when evaluating invalid data, as using a fixed frequency may make it difficult or impossible to\nunderstand invalid date."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"bug-fixes",children:"Bug Fixes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Import error when empty model item in YAML:"}),"\n",(0,i.jsx)(n.p,{children:"When YAML model had empty item, it is parsed as None and fail in replacing names."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"MODELS:\n  - # <- empty item\n  - NAME: ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"The replacing of names should work as intended, even with empty fields."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,i.jsx)(n.h3,{id:"cli",children:"CLI"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);