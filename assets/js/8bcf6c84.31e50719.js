"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6543],{57400:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>T,frontMatter:()=>p,metadata:()=>i,toc:()=>E});const i=JSON.parse('{"id":"about/modelling/examples/drogon","title":"Drogon model example","description":"The Drogon example is based on a synthetic data set.","source":"@site/docs/about/modelling/examples/drogon.mdx","sourceDirName":"about/modelling/examples","slug":"/about/modelling/examples/drogon","permalink":"/ecalc/docs/about/modelling/examples/drogon","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/ecalc/tree/main/documentation/docs/about/modelling/examples/drogon.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"about","previous":{"title":"Advanced model example","permalink":"/ecalc/docs/about/modelling/examples/advanced"},"next":{"title":"Simple model example","permalink":"/ecalc/docs/about/modelling/examples/simple"}}');var l=s(74848),r=s(28453),t=s(58908),a=s(83457);const o="START: 2020-01-01\nEND: 2036-01-01\nTIME_SERIES:\n  - NAME: SIM1\n    FILE: drogon_mean.csv\n    TYPE: DEFAULT\nFACILITY_INPUTS:\n  - NAME: genset_a_power_fuel\n    FILE: genset.csv\n    TYPE: ELECTRICITY2FUEL\n  - NAME: wi_200\n    FILE: wi_200bar_ssp.csv\n    TYPE: PUMP_CHART_SINGLE_SPEED\n    UNITS:\n        HEAD: M\n        RATE: AM3_PER_HOUR\n        EFFICIENCY: PERCENTAGE\nMODELS:\n  - NAME: drogon_fluid\n    TYPE: FLUID\n    FLUID_MODEL_TYPE: COMPOSITION\n    EOS_MODEL: PR\n    COMPOSITION:\n      water: 0.0\n      nitrogen: 0.510676386339746\n      CO2: 2.44965511776504\n      methane: 75.6328106126248\n      ethane: 10.9074631209139\n      propane: 8.11875087121037\n      i_butane: 0.849146377471569\n      n_butane: 1.34903656604691\n      i_pentane: 0.104982143381498\n      n_pentane: 0.071218218251483\n      n_hexane: 0.0063\n  - NAME: generic_from_input_compressor_chart\n    TYPE: COMPRESSOR_CHART\n    CHART_TYPE: GENERIC_FROM_INPUT\n    POLYTROPIC_EFFICIENCY: 0.8\n    UNITS:\n      EFFICIENCY: FRACTION\n  - NAME: simplified_compressor_train_model\n    TYPE: SIMPLIFIED_VARIABLE_SPEED_COMPRESSOR_TRAIN\n    FLUID_MODEL: drogon_fluid\n    COMPRESSOR_TRAIN:\n      MAXIMUM_PRESSURE_RATIO_PER_STAGE: 3.5\n      COMPRESSOR_CHART: generic_from_input_compressor_chart\n      INLET_TEMPERATURE: 19.3\nFUEL_TYPES:\n  - NAME: fuel_gas\n    CATEGORY: FUEL-GAS\n    EMISSIONS:\n      - NAME: co2_fuel_gas\n        FACTOR: 2.416  #CO2/Sm3 fuel gas burned\nINSTALLATIONS:\n  - NAME: drogon_installation\n    CATEGORY: FIXED\n    HCEXPORT: SIM1;OIL_PROD {+} SIM1;GAS_PROD {/} 1000\n    FUEL: fuel_gas\n    GENERATORSETS:\n      - NAME: main_power\n        ELECTRICITY2FUEL: genset_a_power_fuel\n        CATEGORY: TURBINE-GENERATOR\n        CONSUMERS:\n          - NAME: wi_lp\n            CATEGORY: PUMP\n            ENERGY_USAGE_MODEL:\n              TYPE: PUMP_SYSTEM\n              PUMPS:\n                - NAME: pump_a_lp\n                  CHART: wi_200\n                - NAME: pump_b_lp\n                  CHART: wi_200\n              TOTAL_SYSTEM_RATE: SIM1;WATER_INJ\n              FLUID_DENSITY: 1025\n              OPERATIONAL_SETTINGS:\n                - RATE_FRACTIONS:\n                    - 1\n                    - 0\n                  SUCTION_PRESSURE: 12\n                  DISCHARGE_PRESSURE: 200\n                - RATE_FRACTIONS:\n                    - 0.5\n                    - 0.5\n                  SUCTION_PRESSURE: 12\n                  DISCHARGE_PRESSURE: 200\n\n          - NAME: gas export compressor train\n            CATEGORY: COMPRESSOR\n            ENERGY_USAGE_MODEL:\n              TYPE: COMPRESSOR\n              ENERGYFUNCTION: simplified_compressor_train_model\n              RATE: SIM1;GAS_PROD\n              SUCTION_PRESSURE: 13\n              DISCHARGE_PRESSURE: 421\n\n          - NAME: boosterpump\n            CATEGORY: BASE-LOAD\n            ENERGY_USAGE_MODEL:\n              TYPE: DIRECT\n              LOAD: 2\n          - NAME: baseload\n            CATEGORY: BASE-LOAD\n            ENERGY_USAGE_MODEL:\n              TYPE: DIRECT\n              LOAD: 9\n          - NAME: re-compressors\n            CATEGORY: BASE-LOAD\n            ENERGY_USAGE_MODEL:\n              TYPE: DIRECT\n              LOAD: 2\n",d="POWER, FUEL\n# [MW], [Sm3/d]\n0,0\n2.38,37766.13\n4.76,50769.26\n5.9,59258.52\n7.14,63772.39\n9.52,76775.52\n10.71,83277.09\n11.9,89808.09\n14.28,102781.8\n16.66,115784.9\n17.8,119883.6\n19.04,128788\n21.42,141791.2\n21.4201,166554.2\n28.56,205563.6\n33.32,231569.8\n38.08,257576.1\n42.84,283582.3",c="RATE,HEAD,EFFICIENCY,SPEED\n830,1490,81,3741\n800,1550,81.7,3741\n600,1825,78,3741\n500,1915,72.5,3741\n415,1955,66,3741\n",h="DATE,GAS_PROD,OIL_PROD,WATER_INJ\n01.01.2020,329327.76,2301.9189,3796.9621\n01.01.2021,533620.39,3699.8435,8533.0322\n01.01.2022,416004.76,2837.5915,9434.1385\n01.01.2023,340118.19,2280.7372,10019.154\n01.01.2024,290127.01,1905.7952,10428.387\n01.01.2025,253292.19,1635.7671,10725.254\n01.01.2026,223584.53,1426.9726,10954.338\n01.01.2027,198453.07,1249.781,11153.675\n01.01.2028,177306.77,1099.8572,11318.01\n01.01.2029,159723.78,977.37529,11450.614\n01.01.2030,145056.33,875.30836,11561.335\n01.01.2031,132577.75,788.45521,11654.645\n01.01.2032,122166.68,715.64707,11734.129\n01.01.2033,113070.74,653.71407,11802.565\n01.01.2034,105114.67,600.04874,11860.717\n01.01.2035,98147.958,553.56297,11910.283\n",p={},u="Drogon model example",m={},E=[{value:"YAML model overview",id:"yaml-model-overview",level:2},{value:"TIME_SERIES",id:"time_series",level:2},{value:"FACILITY_INPUTS",id:"facility_inputs",level:2},{value:"MODELS",id:"models",level:2},{value:"FUEL_TYPES",id:"fuel_types",level:2},{value:"INSTALLATIONS",id:"installations",level:2},{value:"GENERATORSETS",id:"generatorsets",level:3},{value:"PUMPS",id:"pumps",level:4},{value:"COMPRESSORS",id:"compressors",level:4},{value:"BASE-LOAD",id:"base-load",level:4},{value:"Full Model",id:"full-model",level:2},{value:"Input Data",id:"input-data",level:2},{value:"Facility resources",id:"facility-resources",level:3},{value:"Timeseries resources",id:"timeseries-resources",level:3}];function _(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"drogon-model-example",children:"Drogon model example"})}),"\n",(0,l.jsx)(n.p,{children:"The Drogon example is based on a synthetic data set."}),"\n",(0,l.jsx)(n.p,{children:"On the installation, the following consumers are identified:"}),"\n",(0,l.jsx)(n.mermaid,{value:"graph TD;\n   A(Drogon Installation) --\x3e B(Generator set A);\n   B --\x3e C(Base production load);\n   B --\x3e D(Gas compression train);\n   B --\x3e E(Gas re-compressors);\n   B --\x3e F(Sea water injection pump);\n   B --\x3e G(Booster pump);\n   style A stroke:red;\n   style C stroke:blue;\n   style D stroke:blue;\n   style E stroke:blue;\n   style F stroke:blue;\n   style G stroke:blue;"}),"\n",(0,l.jsx)(n.p,{children:"The results of a performed characterization of the equipment are listed below:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Consumer"}),(0,l.jsx)(n.th,{children:"Type"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Generator set A"}),(0,l.jsx)(n.td,{children:"Generator set"}),(0,l.jsx)(n.td,{children:"Variable fuel consumer with electricity to fuel function"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Base production load"}),(0,l.jsx)(n.td,{children:"Power consumer"}),(0,l.jsx)(n.td,{children:"Constant load - 9 MW"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Gas compression train"}),(0,l.jsx)(n.td,{children:"Power consumer"}),(0,l.jsx)(n.td,{children:"Variable consumption depending on produced gas rate"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Gas re-compressors"}),(0,l.jsx)(n.td,{children:"Power consumer"}),(0,l.jsx)(n.td,{children:"Constant load - 2 MW"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Sea water injection pump"}),(0,l.jsx)(n.td,{children:"Power consumer"}),(0,l.jsx)(n.td,{children:"Variable consumption depending on water injection rate"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Booster pump"}),(0,l.jsx)(n.td,{children:"Power consumer"}),(0,l.jsx)(n.td,{children:"Constant load - 2 MW"})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"yaml-model-overview",children:"YAML model overview"}),"\n",(0,l.jsx)(n.p,{children:"The YAML model consists of the following components:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Time series input"}),"\n",(0,l.jsx)(n.li,{children:"Facility inputs"}),"\n",(0,l.jsx)(n.li,{children:"Model inputs"}),"\n",(0,l.jsx)(n.li,{children:"Fuel type input"}),"\n",(0,l.jsx)(n.li,{children:"Installation topography"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The skeleton of the YAML file looks like the following:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"TIME_SERIES: \n    <placeholder>\nFACILITY_INPUTS:\n    <placeholder>\nMODELS:\n    <placeholder>\nFUEL_TYPES:\n    <placeholder>\nINSTALLATIONS:\n    <placeholder>\n"})}),"\n",(0,l.jsx)(n.h2,{id:"time_series",children:"TIME_SERIES"}),"\n",(0,l.jsxs)(n.p,{children:["The reservoir variables. In this case the file is called: ",(0,l.jsx)(n.code,{children:"drogon_mean.csv"}),"."]}),"\n",(0,l.jsx)(t.A,{start:1,end:4,language:"yaml",children:o}),"\n",(0,l.jsx)(n.h2,{id:"facility_inputs",children:"FACILITY_INPUTS"}),"\n",(0,l.jsxs)(n.p,{children:["In this case, the compressors are not specified in this section as ",(0,l.jsx)(n.a,{href:"/ecalc/docs/about/modelling/setup/models/compressor_modelling/compressor_charts/",children:"GENERIC COMPRESSOR CHARTS"}),". Thus, the pump chart and generator set will be the only facility components specified within this section."]}),"\n",(0,l.jsxs)(n.p,{children:["The pump will be single speed, meaning that the pump type will be ",(0,l.jsx)(n.code,{children:"PUMP_CHART_SINGLE_SPEED"}),". The generator set will be a tabulated, where power consumption will be linked to fuel gas utilised."]}),"\n",(0,l.jsx)(t.A,{start:5,end:15,language:"yaml",children:o}),"\n",(0,l.jsx)(n.h2,{id:"models",children:"MODELS"}),"\n",(0,l.jsx)(n.p,{children:"The model section will contain the fluid model, the compressor chart and the subsequent compressor model.\nPeng-Robinson (PR) will be the selected equation of state in this example."}),"\n",(0,l.jsxs)(n.p,{children:['This example will use a generic compressor chart. In this case, a generic compressor chart from input will utilised. Here, the a "typical" chart will be shifted to match the input head and rate data. See ',(0,l.jsx)(n.a,{href:"/ecalc/docs/about/modelling/setup/models/compressor_modelling/compressor_charts/",children:"GENERIC COMPRESSOR CHARTS"})," for more details. When a generic chart is used, a polytropic efficiency needs to be specified. This value will be constant throughout the use, in this case a value of 0.8 is used."]}),"\n",(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.a,{href:"/ecalc/docs/about/modelling/setup/models/compressor_modelling/compressor_models_types/simplified_variable_speed_compressor_train_model",children:"SIMPLIFIED_VARIABLE_SPEED_COMPRESSOR_TRAIN"})," model is used in this example, as this is necessary when a generic chart is used. Instead of manually specifying the number of compression stages, a ",(0,l.jsx)(n.code,{children:"MAXIMUM_PRESSURE_RATIO_PER_STAGE"})," of 3.5 is defined. This will automatically distribute the pressure increase amongst the compression train so that no pressure ratio per compression stage will be above 3.5."]}),"\n",(0,l.jsx)(t.A,{start:16,end:45,language:"yaml",children:o}),"\n",(0,l.jsx)(n.h2,{id:"fuel_types",children:"FUEL_TYPES"}),"\n",(0,l.jsxs)(n.p,{children:["The fuel gas has a CO",(0,l.jsx)("sub",{children:"2"})," factor of 2.416."]}),"\n",(0,l.jsx)(t.A,{start:46,end:51,language:"yaml",children:o}),"\n",(0,l.jsx)(n.h2,{id:"installations",children:"INSTALLATIONS"}),"\n",(0,l.jsxs)(n.p,{children:["In the ",(0,l.jsx)(n.code,{children:"INSTALLATIONS"})," section, the previously defined models and facility inputs are further defined. Here the hydrocarbon export can be specified. This is used in order to get a hydrocarbon-to-emission value. In this case, it is assumed that this facility exports oil (",(0,l.jsx)(n.code,{children:"OIL_PROD"}),") and gas (",(0,l.jsx)(n.code,{children:"GAS_PROD"}),")."]}),"\n",(0,l.jsx)(t.A,{start:52,end:56,language:"yaml",children:o}),"\n",(0,l.jsx)(n.h3,{id:"generatorsets",children:"GENERATORSETS"}),"\n",(0,l.jsxs)(n.p,{children:["There is one generator set used in this example - ",(0,l.jsx)(n.code,{children:"Generator set A"}),". This is a tabular relationship between power generated/consumed and fuel gas burnt.\nUnder this category, all consumers that utilise electricity are defined. In this case scenario, all pumps and compressors are electrically driven; thus, all consumers will be specified under this category."]}),"\n",(0,l.jsx)(t.A,{start:57,end:61,language:"yaml",children:o}),"\n",(0,l.jsx)(n.h4,{id:"pumps",children:"PUMPS"}),"\n",(0,l.jsxs)(n.p,{children:["The previously defined variable speed pump (in ",(0,l.jsx)(n.code,{children:"FACILITY_INPUTS"}),") is put into further defined with suction and discharge pressures, rates and operational settings."]}),"\n",(0,l.jsxs)(n.p,{children:["Here, a system of pumps is used. This means that instead of a single pump being used to deliver the respective injection rate, a system of pumps is defined. In this case, a system of two pumps will be used. If the first pump is unable to deliver the requested head or rate, a second pump will be additionally used and the rate will be split across the pump system.\nAs only one pump has been defined, the same pump model will be used for each train. As each pump is identical, the rate will be equally split across the train when needed (this is to ensure the highest pump efficiency - see ",(0,l.jsx)(n.a,{href:"../setup/installations/pump_models_in_calculations",children:"PUMP MODELLING"})," for more details.)"]}),"\n",(0,l.jsxs)(n.p,{children:["A fluid density of 1025 kg/m",(0,l.jsx)("sup",{children:"3"})," is used, with a suction and discharge pressure of 12 and 200 bar respectively."]}),"\n",(0,l.jsx)(t.A,{start:62,end:83,language:"yaml",children:o}),"\n",(0,l.jsx)(n.h4,{id:"compressors",children:"COMPRESSORS"}),"\n",(0,l.jsx)(n.p,{children:"For the compression model, a compressor system is not used. This is due to the use of generic compressor charts. As the generic charts are shifted from input data there is no need for an additional compression train. No matter what rate/head values are inputted here, the generic chart is shifted so that all operational points will be within the operational envelope of the compressor."}),"\n",(0,l.jsx)(n.p,{children:"Here, 13 bar and 421 bar is specified for the suction and discharge pressure respectively."}),"\n",(0,l.jsx)(t.A,{start:85,end:97,language:"yaml",children:o}),"\n",(0,l.jsx)(n.h4,{id:"base-load",children:"BASE-LOAD"}),"\n",(0,l.jsx)(n.p,{children:"Three different constant-loads are specified in this section. These being the booster pump, the re-compressors and then the general facility base-load."}),"\n",(0,l.jsx)(t.A,{start:99,end:113,language:"yaml",children:o}),"\n",(0,l.jsx)(n.h2,{id:"full-model",children:"Full Model"}),"\n",(0,l.jsx)(a.A,{title:"model.yaml",language:"yaml",children:o}),"\n",(0,l.jsx)(n.h2,{id:"input-data",children:"Input Data"}),"\n",(0,l.jsx)(n.h3,{id:"facility-resources",children:"Facility resources"}),"\n",(0,l.jsx)(a.A,{title:"genset.csv",children:d}),"\n",(0,l.jsx)(a.A,{title:"wi_200bar_ssp.csv",children:c}),"\n",(0,l.jsx)(n.h3,{id:"timeseries-resources",children:"Timeseries resources"}),"\n",(0,l.jsx)(a.A,{title:"drogon_mean.csv",children:h})]})}function T(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(_,{...e})}):_(e)}},58908:(e,n,s)=>{s.d(n,{A:()=>r});var i=s(83457),l=s(74848);const r=function({start:e,end:n,children:s,...r}){const t=s.split("\n").slice(e-1,n).join("\n");return(0,l.jsx)(i.A,{...r,children:t})}}}]);