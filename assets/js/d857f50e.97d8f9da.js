"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4413],{58908:(e,n,r)=>{r.d(n,{A:()=>a});var s=r(83457),i=r(74848);const a=function({start:e,end:n,children:r,...a}){const l=r.split("\n").slice(e-1,n).join("\n");return(0,i.jsx)(s.A,{...a,children:l})}},60275:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>x,contentTitle:()=>_,default:()=>S,frontMatter:()=>u,metadata:()=>s,toc:()=>A});const s=JSON.parse('{"id":"about/modelling/examples/simple","title":"Simple model example","description":"The following is an example with one installation called Installation A that exports oil (OILPROD) and gas (GASPROD).","source":"@site/docs/about/modelling/examples/simple.mdx","sourceDirName":"about/modelling/examples","slug":"/about/modelling/examples/simple","permalink":"/ecalc/docs/about/modelling/examples/simple","draft":false,"unlisted":false,"editUrl":"https://github.com/equinor/ecalc/tree/main/documentation/docs/about/modelling/examples/simple.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"about","previous":{"title":"Drogon model example","permalink":"/ecalc/docs/about/modelling/examples/drogon"},"next":{"title":"eCalc Keywords","permalink":"/ecalc/docs/about/references/"}}');var i=r(74848),a=r(28453),l=r(58908),t=r(83457);const d="RATE,POWER\n#[SM3/day],[MW]\n0,0\n1,4.1\n100000000,4.1\n200000000,4.1\n210000000,4.1\n220000000,4.4\n230000000,4.8\n240000000,5.1\n250000000,5.4\n260000000,5.8\n270000000,6.1\n280000000,6.4\n290000000,6.8\n300000000,7.1\n500000000,14.2",o="RATE,FUEL\n#[SM3/day],[SM3/day]\n0,0\n0.1,50000\n3000000,50000\n3500000,130000\n7000000,170000",c="POWER,FUEL\n#[MW],[SM3/day]\n0,     0\n0.1,   65000\n10.0,  75000\n20.0,  126000\n40.0,  250000\n100.0, 750000",h="Dates,                  OIL_PROD,    GAS_SALES,     WATER_PROD,   WATER_INJ,   GAS_INJ,      GAS_LIFT\n#,                      Sm3/d,       Sm3/d,         m3/d,         m3/d,        Sm3/d,        Sm3/d\n2020-01-01 00:00:00,    9000,        3500000,       17000,        34000,       220000000,    13000000\n2021-01-01 00:00:00,    8000,        3600000,       17200,        33000,       220000000,    17000000\n2022-01-01 00:00:00,    7000,        3700000,       15000,        30000,       220000000,    21000000\n2023-01-01 00:00:00,    6000,        3800000,       16000,        33000,       230000000,    24000000\n2024-01-01 00:00:00,    6000,        3900000,       14000,        35000,       230000000,    28000000\n2024-12-01 00:00:00,    6000,        4000000,       15000,        36000,       240000000,    31000000\n2026-01-01 00:00:00,    7000,        4100000,       17000,        36000,       240000000,    35000000\n2027-01-01 00:00:00,    6000,        4500000,       15000,        38000,       240000000,    39000000\n2028-01-01 00:00:00,    6000,        3500000,       12000,        33000,       240000000,    43000000\n2029-01-01 00:00:00,    5000,        2500000,       14000,        36000,       240000000,    46000000\n2030-01-01 00:00:00,    6000,        2000000,       16000,        35000,       240000000,    50000000\n2031-01-01 00:00:00,    4000,        3000000,       14000,        33000,       240000000,    53000000",E="SPEED,RATE,HEAD,EFFICIENCY\n3250,250,2640,59\n3250,360,2490,68\n3250,500,2342,77\n3250,600,2210,80\n3250,667,2068,78\n3250,735,1870,74",p="RATE,POWER\n#[Sm3/day],[MW]\n0,0\n1,3\n8500,4\n9000,4\n17000,6\n17500,9\n36000,13",m="START: 2020-01-01\nEND: 2031-01-01\nTIME_SERIES:\n  - NAME: SIM\n    FILE: production_data.csv\n    TYPE: DEFAULT\nFACILITY_INPUTS:\n  - NAME: genset\n    FILE: genset.csv\n    TYPE: ELECTRICITY2FUEL\n  - NAME: compressor_sampled\n    FILE: compressor_sampled.csv\n    TYPE: COMPRESSOR_TABULAR\n  - NAME: compressor_with_turbine_sampled\n    FILE: compressor_sampled_with_turbine.csv\n    TYPE: COMPRESSOR_TABULAR\n  - NAME: pump_sampled\n    FILE: pump_sampled.csv #!include, commented !include is now supported\n    TYPE: TABULAR\n  - NAME: pump_chart\n    FILE: pump_chart.csv\n    TYPE: PUMP_CHART_SINGLE_SPEED\n    UNITS:\n      HEAD: M\n      RATE: AM3_PER_HOUR\n      EFFICIENCY: PERCENTAGE\n\nFUEL_TYPES:\n  - NAME: fuel_gas\n    EMISSIONS:\n      - NAME: CO2\n        FACTOR: 2.19  # CO2/Sm3 fuel gas burned\n\nVARIABLES:\n  hydrocarbon_export_sm3_per_day:\n    VALUE: SIM;OIL_PROD {+} SIM;GAS_SALES {/} 1000  # divide the gas rate by 1000 to get oil equivalent\n  salt_water_injection_rate_m3_per_day:\n    VALUE: SIM;WATER_INJ {-} SIM;WATER_PROD {+} SIM;WATER_PROD {*} (SIM;WATER_PROD < 1500) {+} (SIM;WATER_PROD {-} 17000) {*} (SIM;WATER_PROD > 17000) {*} (SIM;WATER_PROD < 18500)\n  gas_export_rate_sm3_per_day:\n    VALUE: SIM;GAS_SALES\n  gas_injection_rate_sm3_per_day:\n    VALUE: SIM;GAS_INJ {+} SIM;GAS_LIFT\n  produced_water_reinjection_condition:\n    VALUE: SIM;WATER_PROD > 1500\n  produced_water_reinjection_total_system_rate_m3_per_day:\n    VALUE: SIM;WATER_PROD\n  flare_fuel_rate_sm3_day:\n    1995-10-01:\n      VALUE: 10000\n    2005-01-01:\n      VALUE: 7000\n\nINSTALLATIONS:\n  - NAME: Installation A\n    HCEXPORT: $var.hydrocarbon_export_sm3_per_day\n    FUEL: fuel_gas\n    GENERATORSETS:\n      - NAME: Generator set A\n        ELECTRICITY2FUEL: genset\n        CATEGORY: TURBINE-GENERATOR\n        CONSUMERS:\n          - NAME: Base production load\n            CATEGORY: BASE-LOAD\n            ENERGY_USAGE_MODEL:\n              TYPE: DIRECT\n              LOAD: 11.8 # MW\n          - NAME: Gas injection compressor\n            CATEGORY: COMPRESSOR\n            ENERGY_USAGE_MODEL:\n              TYPE: COMPRESSOR\n              ENERGYFUNCTION: compressor_sampled\n              RATE: $var.gas_injection_rate_sm3_per_day\n          - NAME: Produced water reinjection pump\n            CATEGORY: PUMP\n            ENERGY_USAGE_MODEL:\n              TYPE: PUMP\n              CONDITION: $var.produced_water_reinjection_condition\n              ENERGYFUNCTION: pump_chart\n              RATE: $var.produced_water_reinjection_total_system_rate_m3_per_day\n              FLUID_DENSITY: 1010\n              SUCTION_PRESSURE: 10  # bara\n              DISCHARGE_PRESSURE: 200  # bara\n          - NAME: Sea water injection pump\n            CATEGORY: PUMP\n            ENERGY_USAGE_MODEL:\n              TYPE: TABULATED\n              ENERGYFUNCTION: pump_sampled\n              VARIABLES:\n                - NAME: RATE\n                  EXPRESSION: $var.salt_water_injection_rate_m3_per_day\n    FUELCONSUMERS:\n      - NAME: Flare\n        CATEGORY: FLARE\n        ENERGY_USAGE_MODEL:\n          TYPE: DIRECT\n          FUELRATE: $var.flare_fuel_rate_sm3_day\n      - NAME: Gas export compressor\n        CATEGORY: COMPRESSOR\n        ENERGY_USAGE_MODEL:\n          TYPE: COMPRESSOR\n          ENERGYFUNCTION: compressor_with_turbine_sampled\n          RATE: $var.gas_export_rate_sm3_per_day\n",u={},_="Simple model example",x={},A=[{value:"YAML model overview",id:"yaml-model-overview",level:2},{value:"TIME_SERIES",id:"time_series",level:2},{value:"FACILITY_INPUTS",id:"facility_inputs",level:2},{value:"FUEL_TYPES",id:"fuel_types",level:2},{value:"VARIABLES",id:"variables",level:2},{value:"INSTALLATION",id:"installation",level:2},{value:"GENERATORSETS",id:"generatorsets",level:3},{value:"FUELCONSUMERS",id:"fuelconsumers",level:3},{value:"ENERGY_USAGE_MODEL",id:"energy_usage_model",level:2},{value:"Full eCalc YAML model",id:"full-ecalc-yaml-model",level:2},{value:"Input files",id:"input-files",level:2}];function j(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"simple-model-example",children:"Simple model example"})}),"\n",(0,i.jsxs)(n.p,{children:["The following is an example with one installation called ",(0,i.jsx)(n.code,{children:"Installation A"})," that exports oil (",(0,i.jsx)(n.code,{children:"OIL_PROD"}),") and gas (",(0,i.jsx)(n.code,{children:"GAS_PROD"}),").\nThe installation emits CO",(0,i.jsx)("sub",{children:"2"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"On this installation, the following components are identified:"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph TD;\n   A(Installation A) --\x3e B(Flare);\n   A --\x3e C(Gas export compressor);\n   A --\x3e D(Generator set A);\n   D --\x3e E(Base production load);\n   D --\x3e F(Gas injection compressor);\n   D --\x3e G(Produced water reinjection pump);\n   D --\x3e H(Sea water injection pump);\n   style A stroke:red;\n   style E stroke:blue;\n   style F stroke:blue;\n   style G stroke:blue;\n   style H stroke:blue;"}),"\n",(0,i.jsx)(n.p,{children:"The results of a performed characterization of the equipment are listed below:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Consumer"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Generator set A"}),(0,i.jsx)(n.td,{children:"Generator set"}),(0,i.jsx)(n.td,{children:"Variable fuel consumer with electricity to fuel function"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Base production load"}),(0,i.jsx)(n.td,{children:"Power consumer"}),(0,i.jsx)(n.td,{children:"Constant load 11.8 MW"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Gas injection compressor"}),(0,i.jsx)(n.td,{children:"Power consumer"}),(0,i.jsx)(n.td,{children:"Variable consumption depending on gas injection rate and lift gas rate"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Produced water reinjection pump"}),(0,i.jsx)(n.td,{children:"Power consumer"}),(0,i.jsx)(n.td,{children:"Variable consumption depending on water production rate and water injection rate. The pump suction pressure is 10 bar and discharge pressure is 200 bar."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Sea water injection pump"}),(0,i.jsx)(n.td,{children:"Power consumer"}),(0,i.jsx)(n.td,{children:"Variable consumption depending on a complex combination on water injection rate and water production rate"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Flare"}),(0,i.jsx)(n.td,{children:"Direct fuel consumer"}),(0,i.jsxs)(n.td,{children:["Before 1.1.2005: Constant fuel rate 10000 Sm",(0,i.jsx)("sup",{children:"3"}),"/day, From 1.1.2005: Constant fuel rate 7000 Sm",(0,i.jsx)("sup",{children:"3"}),"/day"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Gas export compressor"}),(0,i.jsx)(n.td,{children:"Direct fuel consumer"}),(0,i.jsx)(n.td,{children:"Variable fuel consumer depending on gas sales rate"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"yaml-model-overview",children:"YAML model overview"}),"\n",(0,i.jsx)(n.p,{children:"The YAML model consist of these main components:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Time series inputs - ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/TIME_SERIES",children:"TIME_SERIES"})]}),"\n",(0,i.jsxs)(n.li,{children:["Facility characterization input - ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/FACILITY_INPUTS",children:"FACILITY_INPUTS"})]}),"\n",(0,i.jsxs)(n.li,{children:["Fuel input - ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/FUEL_TYPES",children:"FUEL_TYPES"})]}),"\n",(0,i.jsxs)(n.li,{children:["Model variables - ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/VARIABLES",children:"VARIABLES"})]}),"\n",(0,i.jsxs)(n.li,{children:["Installation topology - ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/INSTALLATIONS",children:"INSTALLATIONS"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The YAML setup file looks like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="model.yaml"',children:"TIME_SERIES:\n  <placeholder>\nFACILITY_INPUTS:\n  <placeholder>\nFUEL_TYPES:\n  <placeholder>\nVARIABLES:\n  <placeholder>\nINSTALLATIONS:\n  <placeholder>\n"})}),"\n",(0,i.jsx)(n.p,{children:"We will now replace the placeholders for each of the main keywords above."}),"\n",(0,i.jsx)(n.h2,{id:"time_series",children:"TIME_SERIES"}),"\n",(0,i.jsxs)(n.p,{children:["The reservoir variables, in this case, are found in a CSV (Comma separated file) ",(0,i.jsx)(n.code,{children:"production_data.csv"}),".\nWe give the time-series data a name that can be referenced as variables elsewhere in the form ",(0,i.jsx)(n.code,{children:"<NAME>:<NAME OF COLUMN>"}),".\nSee ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/TIME_SERIES",children:"TIME_SERIES"})," for further details."]}),"\n",(0,i.jsx)(l.A,{title:"model.yaml",start:1,end:4,language:"yaml",children:m}),"\n",(0,i.jsx)(n.h2,{id:"facility_inputs",children:"FACILITY_INPUTS"}),"\n",(0,i.jsxs)(n.p,{children:["We specify CSV input data for processing equipment using FACILITY_INPUTS. This is used for generatorsets,\ntabulated/sampled models and pump charts.\nSee ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/FACILITY_INPUTS",children:"FACILITY_INPUTS"})," for further details."]}),"\n",(0,i.jsxs)(n.p,{children:["Here we define a tabulated genset, a sampled compressor, a sampled compressor driven by a turbine, a sampled pump,\nand a single speed pump chart. These will be used in the final model for illustration.\nNote that more complicated energy models are defined under the ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/MODELS",children:"MODELS-keyword"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"See the input data further down to understand the input formats."}),"\n",(0,i.jsx)(l.A,{title:"model.yaml",start:5,end:24,language:"yaml",children:m}),"\n",(0,i.jsx)(n.h2,{id:"fuel_types",children:"FUEL_TYPES"}),"\n",(0,i.jsxs)(n.p,{children:["In this example there is only one ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/FUEL_TYPES",children:"FUEL_TYPES"})," - ",(0,i.jsx)(n.code,{children:"fuel_gas"}),". The emissions we model with the fuel is CO",(0,i.jsx)("sub",{children:"2"}),". The CO",(0,i.jsx)("sub",{children:"2"})," factor\nis 2.19 kg CO2 per Sm",(0,i.jsx)("sup",{children:"3"})," fuel gas burned."]}),"\n",(0,i.jsx)(l.A,{title:"model.yaml",start:26,end:30,language:"yaml",children:m}),"\n",(0,i.jsx)(n.h2,{id:"variables",children:"VARIABLES"}),"\n",(0,i.jsxs)(n.p,{children:["To run the model it is recommended to specify ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/VARIABLES",children:"VARIABLES"}),",\ninstead of hard coding values in difference places. This makes it easier to develop, maintain and understand the model\nby allowing descriptive variable names and avoid duplications."]}),"\n",(0,i.jsx)(n.p,{children:"For our model, we specify the following variables:"}),"\n",(0,i.jsx)(l.A,{title:"model.yaml",start:32,end:49,language:"yaml",children:m}),"\n",(0,i.jsxs)(n.p,{children:["We reference the ",(0,i.jsx)(n.a,{href:"#time_series",children:"TIME_SERIES"})," ",(0,i.jsx)(n.code,{children:"SIM"})," using the column names from the CSV file. Here we use for example\n",(0,i.jsx)(n.code,{children:"SIM:OIL_PROD"})," (Field Oil Production Rate) ",(0,i.jsx)(n.code,{children:"SIM:GAS_PROD"})," (Field Gas Sales Rate)."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"It is possible to specify if-else conditions by multiplying with boolean values.\nThis has been done in the $var.sea_water_injection_rate_m3_per_day variable example above."})}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"INSTALLATION"}),"\n",(0,i.jsx)(n.p,{children:"An installation is composed of hydrocarbon export, a default fuel for that installation and consumers in the form\nof generatorsets (with electric sub-consumers), and direct fuel consumers."}),"\n",(0,i.jsx)(n.p,{children:"We specify:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"NAME"}),": the installation name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HCEXPORT"}),": Hydrocarbon export in Sm",(0,i.jsx)("sup",{children:"3"}),"/day by referring to the variable specified under ",(0,i.jsx)(n.a,{href:"#variables",children:"VARIABLES"})," above."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FUEl"}),": Default fuel specified in ",(0,i.jsx)(n.a,{href:"#fuel_types",children:"FUEL_TYPES"})," above."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"INSTALLATIONS:\n  - NAME: Installation A\n    HCEXPORT: $var.hydrocarbon_export_sm3_per_day\n    FUEL: fuel_gas\n    GENERATORSETS:\n      <placeholder>\n    FUELCONSUMERS:\n      <placeholder>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"generatorsets",children:"GENERATORSETS"}),"\n",(0,i.jsxs)(n.p,{children:["There is one generator set, ",(0,i.jsx)(n.code,{children:"Generator set A"}),". This has a power to fuel function defined in\n",(0,i.jsx)(n.a,{href:"#facility_inputs",children:"FACILITY_INPUTS"})," with the name ",(0,i.jsx)(n.code,{children:"genset"}),". Further, the consumers getting\npower from the generator set are ",(0,i.jsx)(n.em,{children:"Base production load"}),", ",(0,i.jsx)(n.em,{children:"Gas injection compressor"}),", ",(0,i.jsx)(n.em,{children:"Produced water re-injection pump"}),"\nand ",(0,i.jsx)(n.em,{children:"Sea-water injection pump"}),". The setup for ",(0,i.jsx)(n.code,{children:"Generator set A"})," thus becomes:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"    GENERATORSETS:\n      - NAME: Generator set A\n        ELECTRICITY2FUEL: genset\n        CATEGORY: TURBINE-GENERATOR\n        CONSUMERS:\n          - NAME: Base production load\n            CATEGORY: BASE-LOAD\n            ENERGY_USAGE_MODEL:\n              <placeholder>\n          - NAME: Gas injection compressor\n            CATEGORY: COMPRESSOR\n            ENERGY_USAGE_MODEL:\n              <placeholder>\n          - NAME: Produced water reinjection pump\n            CATEGORY: PUMP\n            ENERGY_USAGE_MODEL:\n              <placeholder>\n          - NAME: Sea water injection pump\n            CATEGORY: PUMP\n            ENERGY_USAGE_MODEL:\n              <placeholder>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"fuelconsumers",children:"FUELCONSUMERS"}),"\n",(0,i.jsxs)(n.p,{children:["The direct fuel consumers are ",(0,i.jsx)(n.strong,{children:"Flare"})," and ",(0,i.jsx)(n.strong,{children:"Gas export compressor"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="model.yaml"',children:"    FUELCONSUMERS:\n      - NAME: Flare\n        CATEGORY: FLARE\n        ENERGY_USAGE_MODEL:\n          <placeholder>\n      - NAME: Gas export compressor\n        CATEGORY: COMPRESSOR\n        ENERGY_USAGE_MODEL:\n          <placeholder>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"energy_usage_model",children:"ENERGY_USAGE_MODEL"}),"\n",(0,i.jsxs)(n.p,{children:["We will now fill in the final placeholders with detailed ",(0,i.jsx)(n.a,{href:"/ecalc/docs/about/references/ENERGY_USAGE_MODEL",children:"ENERGY_USAGE_MODEL"}),"s."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Base production load"})," has a constant load of 11.8 MW:"]}),"\n",(0,i.jsx)(l.A,{title:"model.yaml",start:60,end:64,language:"yaml",children:m}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Gas injection compressor"})," is represented by a tabulated (sampled) energy usage model defining the relationship\nbetween the gas injection rate [Sm",(0,i.jsx)("sup",{children:"3"}),"/day] and the corresponding power requirement. The gas rate is already defined\nin the variable ",(0,i.jsx)(n.a,{href:"#variables",children:"gas_injection_rate_sm3_per_day"})," as ",(0,i.jsx)(n.code,{children:"SIM;GAS_INJ {+} SIM;GAS_LIFT"}),":"]}),"\n",(0,i.jsx)(l.A,{title:"model.yaml",start:65,end:72,language:"yaml",children:m}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Produced water reinjection pump"})," is variable and its energy function is dependent on the field's water\nproduction rate (",(0,i.jsx)(n.code,{children:"WATER_PROD"}),") that is set in the variable ",(0,i.jsx)(n.a,{href:"#variables",children:"produced_water_reinjection_condition"})," as ",(0,i.jsx)(n.code,{children:"SIM;WATER_PROD"}),".\nThe pump only runs when the variables ",(0,i.jsx)(n.a,{href:"#variables",children:"produced_water_reinjection_condition"})," evaluates to true as ",(0,i.jsx)(n.code,{children:"SIM;WATER_PROD > 1500"}),".\nThis is when the water production is above 1500 Sm3/day. Fluid density, suction pressure and discharge pressure\nis also defined:"]}),"\n",(0,i.jsx)(l.A,{title:"model.yaml",start:71,end:80,language:"yaml",children:m}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Sea water injection pump"})," has an energy function that is dependent on the seawater injection rate.\nThis rate is not modeled explicitly in the reservoir input source, but it may be computed\nfrom the injection (",(0,i.jsx)(n.code,{children:"WATER_INJ"}),") and production (",(0,i.jsx)(n.code,{children:"WATER_PROD"}),") rate by the following rules:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In general, the seawater injection rate (",(0,i.jsx)(n.code,{children:"SEAWATER_INJ"}),"), is the difference between injected and\nproduced water: ",(0,i.jsx)(n.code,{children:"SEAWATER_INJ = WATER_INJ - WATER_PROD"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["When the produced water rate is below 1500 SM3/day, this goes directly to sea, such that\n",(0,i.jsx)(n.code,{children:"SEAWATER_INJ = WATER_INJ"})," when ",(0,i.jsx)(n.code,{children:"WATER_PROD < 1500"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["When the produced water rate is between 17000 and 18500 SM3/day, everything above 17000 SM3/day\ngoes directly to the sea, thus ",(0,i.jsx)(n.code,{children:"SEAWATER_INJ = WATER_INJ - 17000"})," when ",(0,i.jsx)(n.code,{children:"17000 < WATER_PROD < 18500"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This is specified as the variable ",(0,i.jsx)(n.a,{href:"#variables",children:"sea_water_injection_rate_m3_per_day"})," above and is defined as:"]}),"\n",(0,i.jsx)(n.p,{children:"The model is specified:"}),"\n",(0,i.jsx)(l.A,{title:"model.yaml",start:81,end:88,language:"yaml",children:m}),"\n",(0,i.jsxs)(n.p,{children:["The flare is changing on the 1st of January 2005. Therefore, we need to use a different constant\nfuel consumption value before and after this date. This is done using the variable ",(0,i.jsx)(n.a,{href:"#variables",children:"flare_fuel_rate_sm3_day"}),"\nabove."]}),"\n",(0,i.jsx)(n.p,{children:"The model is specified:"}),"\n",(0,i.jsx)(l.A,{title:"model.yaml",start:90,end:94,language:"yaml",children:m}),"\n",(0,i.jsxs)(n.p,{children:["Gasexport is a variable fuel consumer whose energy function depends on the field gas sales rate (",(0,i.jsx)(n.code,{children:"GAS_PROD"}),") defined\nin the variable ",(0,i.jsx)(n.a,{href:"#variables",children:"gas_export_rate_sm3_per_day"})," as ",(0,i.jsx)(n.code,{children:"SIM;GAS_PROD"}),". Even though it is not used in the eCalc model, suction and discharge pressure needs to be specified in order for the model to run."]}),"\n",(0,i.jsx)(n.p,{children:"The model is specified:"}),"\n",(0,i.jsx)(l.A,{title:"model.yaml",start:95,end:102,language:"yaml",children:m}),"\n",(0,i.jsx)(n.h2,{id:"full-ecalc-yaml-model",children:"Full eCalc YAML model"}),"\n",(0,i.jsx)(t.A,{title:"model.yaml",language:"yaml",children:m}),"\n",(0,i.jsx)(n.h2,{id:"input-files",children:"Input files"}),"\n",(0,i.jsx)(t.A,{title:"compressor_sampled.csv",children:d}),"\n",(0,i.jsx)(t.A,{title:"compressor_sampled_with_turbine.csv",children:o}),"\n",(0,i.jsx)(t.A,{title:"genset.csv",children:c}),"\n",(0,i.jsx)(t.A,{title:"pump_chart.csv",children:E}),"\n",(0,i.jsx)(t.A,{title:"pump_sampled.csv",children:p}),"\n",(0,i.jsx)(t.A,{title:"production_data.csv",children:h})]})}function S(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(j,{...e})}):j(e)}}}]);